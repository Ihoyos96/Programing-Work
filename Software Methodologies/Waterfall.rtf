{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13600\viewh13460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Computer Science Seminars\
\
Essay #1\
\
Software Engineering Methodology\
\
How do companies manage to design their software?\
\
\

\b Waterfall methodology
\b0 \
\
	1. Sequential design process (like bridge construction, manufacturing).\
	2. Once a step is completed, developers can not go back, unless you want to scratch the whole project. (its all about money)\
	3. Clients cannot change scope once the project has started. ( estimations have been made, thus change cannot be made to the project without violating those estimations. It would require the project to be scratch and a new one made).\
	\
\
DETAILED PLANNED\
DETAILED ANALYSIS\
DETAILED ESIGN\
DEVELOPMENT < all features at once are developed <\
TESTING\
RELEASE\
MAINTENENCE\
\
\
\
Waterfall Methodology advantages\
	Extensive Documentation\
	Clients know what to expect (cost, timeline, features)\
	Documentation helps when there is employee turnover\
	tends to produce a more robust product\
\
Disadvantages\
	Developers can\'92t go back to a previous completed stage\
	heavy initial reqs\
	the whole product is tested at end\
\
Agile\
\
Solution to the disadvantages of the waterfall methodology.\
Feature requirements are written only for small portions of the software.\
features are developed and published in small repetitive iterations called sprints.\
\
Agile disadvantages\
\
\
the iteration nature of agile will make the software development process vulnerable to cyclical/ongoing error;\
\
1. regression cycle\
2. poorly designed feature cycle\
3. early feature release cycle\
\
Breaking the cycle\
Best programming practices\
	use object oriented programming combined with design patters that promote\
		1. single responsibility principle ( each class and method must do only one thing)\
		2. separation of concersn (features an their code should not overlap)\
		3. programming to interfaces ( encapslation, abstraction, polymorphism)\
		4. Test driven development.\
\
Best dev operation practices\
	1. regression testing\
	2. feature testing using use-case from engineering requirements\
	3. version control\
	4. automated deployments\
	5. cohesive development operation process\
\
Poorly designed features cycles:\
\
Breaking the cycle\
\
The software quality chain\
\
	1. Thorough business analysis\
	2. Clear engineering requirements\
	3. Best programming practices\
	4. Best Development operations practices\
}